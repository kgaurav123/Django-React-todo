{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","handleChange","e","target","name","value","type","checked","activeItem","state","setState","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","Component","App","refreshList","axios","get","then","res","todoList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","editItem","handleDelete","id","modal","handleSubmit","put","post","delete","createItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.224993ea.chunk.js","sourcesContent":["\r\n    import React, { Component } from \"react\";\r\n    import {\r\n      Button,\r\n      Modal,\r\n      ModalHeader,\r\n      ModalBody,\r\n      ModalFooter,\r\n      Form,\r\n      FormGroup,\r\n      Input,\r\n      Label\r\n    } from \"reactstrap\";\r\n\r\n    export default class CustomModal extends Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          activeItem: this.props.activeItem\r\n        };\r\n      }\r\n      handleChange = e => {\r\n        let { name, value } = e.target;\r\n        if (e.target.type === \"checkbox\") {\r\n          value = e.target.checked;\r\n        }\r\n        const activeItem = { ...this.state.activeItem, [name]: value };\r\n        this.setState({ activeItem });\r\n      };\r\n      render() {\r\n        const { toggle, onSave } = this.props;\r\n        return (\r\n          <Modal isOpen={true} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\r\n            <ModalBody>\r\n              <Form>\r\n                <FormGroup>\r\n                  <Label for=\"title\">Title</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    value={this.state.activeItem.title}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Enter Todo Title\"\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label for=\"description\">Description</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"description\"\r\n                    value={this.state.activeItem.description}\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"Enter Todo description\"\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label for=\"completed\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      name=\"completed\"\r\n                      checked={this.state.activeItem.completed}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    Completed\r\n                  </Label>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\r\n                Save\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        );\r\n      }\r\n    }","// frontend/src/App.js\n\nimport React, { Component } from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewCompleted: false,\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false\n      },\n      todoList: []\n    };\n  }\n  componentDidMount() {\n    this.refreshList();\n  }\n  refreshList = () => {\n    axios\n      .get(\"http://localhost:8000/api/todos/\")\n      .then(res => this.setState({ todoList: res.data }))\n      .catch(err => console.log(err));\n  };\n  displayCompleted = status => {\n    if (status) {\n      return this.setState({ viewCompleted: true });\n    }\n    return this.setState({ viewCompleted: false });\n  };\n  renderTabList = () => {\n    return (\n      <div className=\"my-5 tab-list\">\n        <span\n          onClick={() => this.displayCompleted(true)}\n          className={this.state.viewCompleted ? \"active\" : \"\"}\n        >\n          complete\n        </span>\n        <span\n          onClick={() => this.displayCompleted(false)}\n          className={this.state.viewCompleted ? \"\" : \"active\"}\n        >\n          Incomplete\n        </span>\n      </div>\n    );\n  };\n  renderItems = () => {\n    const { viewCompleted } = this.state;\n    const newItems = this.state.todoList.filter(\n      item => item.completed === viewCompleted\n    );\n    return newItems.map(item => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span\n          className={`todo-title mr-2 ${\n            this.state.viewCompleted ? \"completed-todo\" : \"\"\n          }`}\n          title={item.description}\n        >\n          {item.title}\n        </span>\n        <span>\n          <button\n            onClick={() => this.editItem(item)}\n            className=\"btn btn-secondary mr-2\"\n          >\n            {\" \"}\n            Edit{\" \"}\n          </button>\n          <button\n            onClick={() => this.handleDelete(item)}\n            className=\"btn btn-danger\"\n          >\n            Delete{\" \"}\n          </button>\n        </span>\n      </li>\n    ));\n  };\n  toggle = () => {\n    this.setState({ modal: !this.state.modal });\n  };\n  handleSubmit = item => {\n    this.toggle();\n    if (item.id) {\n      axios\n        .put(`http://localhost:8000/api/todos/${item.id}/`, item)\n        .then(res => this.refreshList());\n      return;\n    }\n    axios\n      .post(\"http://localhost:8000/api/todos/\", item)\n      .then(res => this.refreshList());\n  };\n  handleDelete = item => {\n    axios\n      .delete(`http://localhost:8000/api/todos/${item.id}`)\n      .then(res => this.refreshList());\n  };\n  createItem = () => {\n    const item = { title: \"\", description: \"\", completed: false };\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  editItem = item => {\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  render() {\n    return (\n      <main className=\"content\">\n        <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\n        <div className=\"row \">\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <div className=\"\">\n                <button onClick={this.createItem} className=\"btn btn-primary\">\n                  Add task\n                </button>\n              </div>\n              {this.renderTabList()}\n              <ul className=\"list-group list-group-flush\">\n                {this.renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n        {this.state.modal ? (\n          <Modal\n            activeItem={this.state.activeItem}\n            toggle={this.toggle}\n            onSave={this.handleSubmit}\n          />\n        ) : null}\n      </main>\n    );\n  }\n}\nexport default App;","\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","// frontend/src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';       // add this\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}